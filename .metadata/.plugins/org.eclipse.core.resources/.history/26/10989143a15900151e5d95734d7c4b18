/*
 * This class will describe all the operations of a BST.
 * */
public class BinarySearchTree {
	public Node root;

	  public BinarySearchTree insert(int value) {
	    Node node = new Node<>(value);

	    if (root == null) {
	      root = node;
	      return this;
	    }

	    insertRec(root, node);
	    return this;
	  }

	  private void insertRec(Node latestRoot, Node node) {

	    if (latestRoot.value > node.value) {

	      if (latestRoot.left == null) {
	        latestRoot.left = node;
	        return;
	      } else {
	        insertRec(latestRoot.left, node);
	      }
	    } else {
	      if (latestRoot.right == null) {
	        latestRoot.right = node;
	        return;
	      } else {
	        insertRec(latestRoot.right, node);
	      }
	    }
	  }

	  /**
	   * Returns the minimum value in the Binary Search Tree.
	   */
	  public int findMinimum() {
	    if (root == null) {
	      return 0;
	    }
	    Node currNode = root;
	    while (currNode.left != null) {
	      currNode = currNode.left;
	    }
	    return currNode.value;
	  }

	  /**
	   * Returns the maximum value in the Binary Search Tree
	   */
	  public int findMaximum() {
	    if (root == null) {
	      return 0;
	    }

	    Node currNode = root;
	    while (currNode.right != null) {
	      currNode = currNode.right;
	    }
	    return currNode.value;
	  }

}
